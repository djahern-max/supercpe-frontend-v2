{"ast":null,"code":"// src/utils/dateUtils.js\n\n/**\n * Format a date string into a readable format\n * @param {string} dateString - ISO date string or date-like string\n * @returns {string} Formatted date (e.g., \"January 15, 2024\")\n */\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  } catch (error) {\n    console.warn('Invalid date string:', dateString);\n    return dateString;\n  }\n};\n\n/**\n * Format a date string into a short format\n * @param {string} dateString - ISO date string or date-like string\n * @returns {string} Short formatted date (e.g., \"Jan 15, 2024\")\n */\nexport const formatDateShort = dateString => {\n  if (!dateString) return 'N/A';\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.warn('Invalid date string:', dateString);\n    return dateString;\n  }\n};\n\n/**\n * Calculate days remaining until a future date\n * @param {string} expirationDate - ISO date string\n * @returns {number} Days remaining (0 if expired)\n */\nexport const calculateDaysRemaining = expirationDate => {\n  if (!expirationDate) return 0;\n  try {\n    const expiry = new Date(expirationDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Reset time to start of day\n    expiry.setHours(0, 0, 0, 0); // Reset time to start of day\n\n    const diffTime = expiry - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return Math.max(0, diffDays);\n  } catch (error) {\n    console.warn('Invalid expiration date:', expirationDate);\n    return 0;\n  }\n};\n\n/**\n * Check if a date is in the past\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is in the past\n */\nexport const isDateInPast = dateString => {\n  if (!dateString) return false;\n  try {\n    const date = new Date(dateString);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return date < today;\n  } catch (error) {\n    console.warn('Invalid date string:', dateString);\n    return false;\n  }\n};\n\n/**\n * Get status based on days until expiration\n * @param {string} expirationDate - ISO date string\n * @returns {string} Status: 'expired', 'critical', 'warning', or 'good'\n */\nexport const getDateStatus = expirationDate => {\n  const daysRemaining = calculateDaysRemaining(expirationDate);\n  if (daysRemaining <= 0) return 'expired';\n  if (daysRemaining <= 30) return 'critical';\n  if (daysRemaining <= 90) return 'warning';\n  return 'good';\n};\n\n/**\n * Format a date for HTML input[type=\"date\"]\n * @param {string|Date} date - Date string or Date object\n * @returns {string} Date in YYYY-MM-DD format\n */\nexport const formatDateForInput = date => {\n  if (!date) return '';\n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toISOString().split('T')[0];\n  } catch (error) {\n    console.warn('Invalid date for input:', date);\n    return '';\n  }\n};\n\n/**\n * Calculate age in years from a date\n * @param {string} dateString - ISO date string (typically birth date or license issue date)\n * @returns {number} Age in years\n */\nexport const calculateYearsFrom = dateString => {\n  if (!dateString) return 0;\n  try {\n    const startDate = new Date(dateString);\n    const today = new Date();\n    let years = today.getFullYear() - startDate.getFullYear();\n\n    // Adjust if birthday hasn't occurred this year\n    const monthDiff = today.getMonth() - startDate.getMonth();\n    if (monthDiff < 0 || monthDiff === 0 && today.getDate() < startDate.getDate()) {\n      years--;\n    }\n    return Math.max(0, years);\n  } catch (error) {\n    console.warn('Invalid date string:', dateString);\n    return 0;\n  }\n};\n\n/**\n * Get relative time description (e.g., \"2 days ago\", \"in 5 days\")\n * @param {string} dateString - ISO date string\n * @returns {string} Relative time description\n */\nexport const getRelativeTime = dateString => {\n  if (!dateString) return 'Unknown';\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = date - now;\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Tomorrow';\n    if (diffDays === -1) return 'Yesterday';\n    if (diffDays > 1) return `In ${diffDays} days`;\n    if (diffDays < -1) return `${Math.abs(diffDays)} days ago`;\n    return formatDateShort(dateString);\n  } catch (error) {\n    console.warn('Invalid date string:', dateString);\n    return dateString;\n  }\n};\n\n/**\n * Check if two dates are in the same compliance period\n * Used for CPE tracking across reporting periods\n * @param {string} date1 - First date\n * @param {string} date2 - Second date\n * @param {string} periodType - 'biennial' or 'triennial'\n * @returns {boolean} True if dates are in same period\n */\nexport const areDatesInSamePeriod = (date1, date2, periodType = 'biennial') => {\n  if (!date1 || !date2) return false;\n  try {\n    const d1 = new Date(date1);\n    const d2 = new Date(date2);\n    const yearsDiff = Math.abs(d1.getFullYear() - d2.getFullYear());\n    if (periodType === 'biennial') {\n      return yearsDiff < 2;\n    } else if (periodType === 'triennial') {\n      return yearsDiff < 3;\n    }\n    return yearsDiff < 2; // Default to biennial\n  } catch (error) {\n    console.warn('Invalid dates for period comparison:', date1, date2);\n    return false;\n  }\n};\n\n/**\n * Get the start of the current compliance year (July 1st in NH)\n * @param {string} currentDate - Current date (optional, defaults to today)\n * @returns {Date} Start of compliance year\n */\nexport const getComplianceYearStart = (currentDate = null) => {\n  const date = currentDate ? new Date(currentDate) : new Date();\n  const year = date.getFullYear();\n\n  // NH compliance year starts July 1st\n  const complianceStart = new Date(year, 6, 1); // Month 6 = July (0-indexed)\n\n  // If we're before July 1st, the compliance year started last year\n  if (date < complianceStart) {\n    complianceStart.setFullYear(year - 1);\n  }\n  return complianceStart;\n};\n\n/**\n * Format duration in a human-readable way\n * @param {number} days - Number of days\n * @returns {string} Formatted duration (e.g., \"2 years, 3 months\")\n */\nexport const formatDuration = days => {\n  if (!days || days < 0) return '0 days';\n  const years = Math.floor(days / 365);\n  const months = Math.floor(days % 365 / 30);\n  const remainingDays = days % 30;\n  const parts = [];\n  if (years > 0) parts.push(`${years} year${years > 1 ? 's' : ''}`);\n  if (months > 0) parts.push(`${months} month${months > 1 ? 's' : ''}`);\n  if (remainingDays > 0 || parts.length === 0) {\n    parts.push(`${remainingDays} day${remainingDays > 1 ? 's' : ''}`);\n  }\n  return parts.join(', ');\n};\n\n/**\n * Check if a date falls within a specific range\n * @param {string} date - Date to check\n * @param {string} startDate - Range start date\n * @param {string} endDate - Range end date\n * @returns {boolean} True if date is within range\n */\nexport const isDateInRange = (date, startDate, endDate) => {\n  if (!date || !startDate || !endDate) return false;\n  try {\n    const checkDate = new Date(date);\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    return checkDate >= start && checkDate <= end;\n  } catch (error) {\n    console.warn('Invalid dates for range check:', {\n      date,\n      startDate,\n      endDate\n    });\n    return false;\n  }\n};\n\n// Export all functions as default object for easier importing\nexport default {\n  formatDate,\n  formatDateShort,\n  calculateDaysRemaining,\n  isDateInPast,\n  getDateStatus,\n  formatDateForInput,\n  calculateYearsFrom,\n  getRelativeTime,\n  areDatesInSamePeriod,\n  getComplianceYearStart,\n  formatDuration,\n  isDateInRange\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","year","month","day","error","console","warn","formatDateShort","calculateDaysRemaining","expirationDate","expiry","today","setHours","diffTime","diffDays","Math","ceil","max","isDateInPast","getDateStatus","daysRemaining","formatDateForInput","dateObj","toISOString","split","calculateYearsFrom","startDate","years","getFullYear","monthDiff","getMonth","getDate","getRelativeTime","now","diffMs","abs","areDatesInSamePeriod","date1","date2","periodType","d1","d2","yearsDiff","getComplianceYearStart","currentDate","complianceStart","setFullYear","formatDuration","days","floor","months","remainingDays","parts","push","length","join","isDateInRange","endDate","checkDate","start","end"],"sources":["/Users/ryze.ai/projects/supercpe-frontend/src/utils/dateUtils.js"],"sourcesContent":["// src/utils/dateUtils.js\n\n/**\n * Format a date string into a readable format\n * @param {string} dateString - ISO date string or date-like string\n * @returns {string} Formatted date (e.g., \"January 15, 2024\")\n */\nexport const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n\n    try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    } catch (error) {\n        console.warn('Invalid date string:', dateString);\n        return dateString;\n    }\n};\n\n/**\n * Format a date string into a short format\n * @param {string} dateString - ISO date string or date-like string\n * @returns {string} Short formatted date (e.g., \"Jan 15, 2024\")\n */\nexport const formatDateShort = (dateString) => {\n    if (!dateString) return 'N/A';\n\n    try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric'\n        });\n    } catch (error) {\n        console.warn('Invalid date string:', dateString);\n        return dateString;\n    }\n};\n\n/**\n * Calculate days remaining until a future date\n * @param {string} expirationDate - ISO date string\n * @returns {number} Days remaining (0 if expired)\n */\nexport const calculateDaysRemaining = (expirationDate) => {\n    if (!expirationDate) return 0;\n\n    try {\n        const expiry = new Date(expirationDate);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time to start of day\n        expiry.setHours(0, 0, 0, 0); // Reset time to start of day\n\n        const diffTime = expiry - today;\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return Math.max(0, diffDays);\n    } catch (error) {\n        console.warn('Invalid expiration date:', expirationDate);\n        return 0;\n    }\n};\n\n/**\n * Check if a date is in the past\n * @param {string} dateString - ISO date string\n * @returns {boolean} True if date is in the past\n */\nexport const isDateInPast = (dateString) => {\n    if (!dateString) return false;\n\n    try {\n        const date = new Date(dateString);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return date < today;\n    } catch (error) {\n        console.warn('Invalid date string:', dateString);\n        return false;\n    }\n};\n\n/**\n * Get status based on days until expiration\n * @param {string} expirationDate - ISO date string\n * @returns {string} Status: 'expired', 'critical', 'warning', or 'good'\n */\nexport const getDateStatus = (expirationDate) => {\n    const daysRemaining = calculateDaysRemaining(expirationDate);\n\n    if (daysRemaining <= 0) return 'expired';\n    if (daysRemaining <= 30) return 'critical';\n    if (daysRemaining <= 90) return 'warning';\n    return 'good';\n};\n\n/**\n * Format a date for HTML input[type=\"date\"]\n * @param {string|Date} date - Date string or Date object\n * @returns {string} Date in YYYY-MM-DD format\n */\nexport const formatDateForInput = (date) => {\n    if (!date) return '';\n\n    try {\n        const dateObj = typeof date === 'string' ? new Date(date) : date;\n        return dateObj.toISOString().split('T')[0];\n    } catch (error) {\n        console.warn('Invalid date for input:', date);\n        return '';\n    }\n};\n\n/**\n * Calculate age in years from a date\n * @param {string} dateString - ISO date string (typically birth date or license issue date)\n * @returns {number} Age in years\n */\nexport const calculateYearsFrom = (dateString) => {\n    if (!dateString) return 0;\n\n    try {\n        const startDate = new Date(dateString);\n        const today = new Date();\n        let years = today.getFullYear() - startDate.getFullYear();\n\n        // Adjust if birthday hasn't occurred this year\n        const monthDiff = today.getMonth() - startDate.getMonth();\n        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < startDate.getDate())) {\n            years--;\n        }\n\n        return Math.max(0, years);\n    } catch (error) {\n        console.warn('Invalid date string:', dateString);\n        return 0;\n    }\n};\n\n/**\n * Get relative time description (e.g., \"2 days ago\", \"in 5 days\")\n * @param {string} dateString - ISO date string\n * @returns {string} Relative time description\n */\nexport const getRelativeTime = (dateString) => {\n    if (!dateString) return 'Unknown';\n\n    try {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffMs = date - now;\n        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n\n        if (diffDays === 0) return 'Today';\n        if (diffDays === 1) return 'Tomorrow';\n        if (diffDays === -1) return 'Yesterday';\n        if (diffDays > 1) return `In ${diffDays} days`;\n        if (diffDays < -1) return `${Math.abs(diffDays)} days ago`;\n\n        return formatDateShort(dateString);\n    } catch (error) {\n        console.warn('Invalid date string:', dateString);\n        return dateString;\n    }\n};\n\n/**\n * Check if two dates are in the same compliance period\n * Used for CPE tracking across reporting periods\n * @param {string} date1 - First date\n * @param {string} date2 - Second date\n * @param {string} periodType - 'biennial' or 'triennial'\n * @returns {boolean} True if dates are in same period\n */\nexport const areDatesInSamePeriod = (date1, date2, periodType = 'biennial') => {\n    if (!date1 || !date2) return false;\n\n    try {\n        const d1 = new Date(date1);\n        const d2 = new Date(date2);\n        const yearsDiff = Math.abs(d1.getFullYear() - d2.getFullYear());\n\n        if (periodType === 'biennial') {\n            return yearsDiff < 2;\n        } else if (periodType === 'triennial') {\n            return yearsDiff < 3;\n        }\n\n        return yearsDiff < 2; // Default to biennial\n    } catch (error) {\n        console.warn('Invalid dates for period comparison:', date1, date2);\n        return false;\n    }\n};\n\n/**\n * Get the start of the current compliance year (July 1st in NH)\n * @param {string} currentDate - Current date (optional, defaults to today)\n * @returns {Date} Start of compliance year\n */\nexport const getComplianceYearStart = (currentDate = null) => {\n    const date = currentDate ? new Date(currentDate) : new Date();\n    const year = date.getFullYear();\n\n    // NH compliance year starts July 1st\n    const complianceStart = new Date(year, 6, 1); // Month 6 = July (0-indexed)\n\n    // If we're before July 1st, the compliance year started last year\n    if (date < complianceStart) {\n        complianceStart.setFullYear(year - 1);\n    }\n\n    return complianceStart;\n};\n\n/**\n * Format duration in a human-readable way\n * @param {number} days - Number of days\n * @returns {string} Formatted duration (e.g., \"2 years, 3 months\")\n */\nexport const formatDuration = (days) => {\n    if (!days || days < 0) return '0 days';\n\n    const years = Math.floor(days / 365);\n    const months = Math.floor((days % 365) / 30);\n    const remainingDays = days % 30;\n\n    const parts = [];\n    if (years > 0) parts.push(`${years} year${years > 1 ? 's' : ''}`);\n    if (months > 0) parts.push(`${months} month${months > 1 ? 's' : ''}`);\n    if (remainingDays > 0 || parts.length === 0) {\n        parts.push(`${remainingDays} day${remainingDays > 1 ? 's' : ''}`);\n    }\n\n    return parts.join(', ');\n};\n\n/**\n * Check if a date falls within a specific range\n * @param {string} date - Date to check\n * @param {string} startDate - Range start date\n * @param {string} endDate - Range end date\n * @returns {boolean} True if date is within range\n */\nexport const isDateInRange = (date, startDate, endDate) => {\n    if (!date || !startDate || !endDate) return false;\n\n    try {\n        const checkDate = new Date(date);\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n\n        return checkDate >= start && checkDate <= end;\n    } catch (error) {\n        console.warn('Invalid dates for range check:', { date, startDate, endDate });\n        return false;\n    }\n};\n\n// Export all functions as default object for easier importing\nexport default {\n    formatDate,\n    formatDateShort,\n    calculateDaysRemaining,\n    isDateInPast,\n    getDateStatus,\n    formatDateForInput,\n    calculateYearsFrom,\n    getRelativeTime,\n    areDatesInSamePeriod,\n    getComplianceYearStart,\n    formatDuration,\n    isDateInRange,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}